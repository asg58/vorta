name: 🚀 Advanced CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      run_integration_tests:
        description: 'Run integration tests'
        type: boolean
        default: true
      run_e2e_tests:
        description: 'Run end-to-end tests'
        type: boolean
        default: false
      performance_benchmark:
        description: 'Run performance benchmarks'
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.12.9'
  NODE_VERSION: '18'
  JAVA_VERSION: '11'
  REGISTRY: ghcr.io

concurrency:
  group: advanced-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Advanced Code Analysis
  advanced-analysis:
    name: 🔬 Advanced Code Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      pull-requests: write

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install Analysis Tools
        run: |
          python -m pip install --upgrade pip
          pip install pylint pytest-cov coverage bandit semgrep radon
          find . -name "requirements*.txt" -exec pip install -r {} \;

      - name: 🔍 Advanced Python Analysis
        run: |
          echo "🔍 Running advanced Python analysis..."

          # Complexity analysis
          radon cc services/ --show-complexity --average
          radon mi services/ --show

          # Advanced linting
          pylint services/ --output-format=json > pylint-report.json || true

          # Coverage analysis
          python -m pytest tests/ --cov=services/ --cov-report=xml --cov-report=html

          # Security analysis
          bandit -r services/ -f json -o bandit-report.json || true

      - name: 🛡️ Semgrep Security Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten

      - name: 📊 SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

  # Multi-Architecture Build
  multi-arch-build:
    name: 🏗️ Multi-Architecture Build
    runs-on: ubuntu-latest
    needs: advanced-analysis
    strategy:
      matrix:
        service: [inference-engine, api-gateway, vector-store, orchestrator]
        platform: [linux/amd64, linux/arm64]

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Multi-Arch Image
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          platforms: ${{ matrix.platform }}
          push: false
          tags: vorta/${{ matrix.service }}:test-${{ matrix.platform }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Integration Tests
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: advanced-analysis
    if: github.event.inputs.run_integration_tests == 'true' || github.event.inputs.run_integration_tests == ''

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vorta_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🐳 Start Services
        run: |
          docker-compose -f docker-compose.yml up -d --wait
          sleep 10

      - name: 🧪 Run Integration Tests
        run: |
          python -m pytest tests/integration/ -v --tb=short
          python -m pytest tests/e2e/ -v --tb=short
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vorta_test
          REDIS_URL: redis://localhost:6379

      - name: 🧹 Cleanup
        if: always()
        run: docker-compose down -v

  # Performance Benchmarks
  performance-benchmark:
    name: ⚡ Performance Benchmarks
    runs-on: ubuntu-latest
    needs: advanced-analysis
    if: github.event.inputs.performance_benchmark == 'true'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Benchmark Tools
        run: |
          pip install pytest-benchmark locust
          find . -name "requirements*.txt" -exec pip install -r {} \;

      - name: ⚡ Run Performance Benchmarks
        run: |
          echo "🔥 Running performance benchmarks..."
          python -m pytest tests/benchmarks/ --benchmark-json=benchmark-results.json

      - name: 📊 Upload Benchmark Results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark-results.json

  # Deployment Readiness Check
  deployment-readiness:
    name: 🚀 Deployment Readiness
    runs-on: ubuntu-latest
    needs: [multi-arch-build, integration-tests]
    if: always()

    steps:
      - name: 📊 Evaluate Results
        run: |
          echo "🔍 Evaluating deployment readiness..."

          MULTI_ARCH_STATUS="${{ needs.multi-arch-build.result }}"
          INTEGRATION_STATUS="${{ needs.integration-tests.result }}"

          if [[ "$MULTI_ARCH_STATUS" == "success" && "$INTEGRATION_STATUS" == "success" ]]; then
            echo "✅ Ready for deployment"
            echo "DEPLOYMENT_READY=true" >> $GITHUB_ENV
          else
            echo "❌ Not ready for deployment"
            echo "DEPLOYMENT_READY=false" >> $GITHUB_ENV
          fi

      - name: 💬 Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentReady = process.env.DEPLOYMENT_READY === 'true';
            const status = deploymentReady ? '✅ Ready' : '❌ Not Ready';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🚀 Advanced CI Results\n\n**Deployment Status:** ${status}\n\n- Multi-Architecture Build: ${{ needs.multi-arch-build.result }}\n- Integration Tests: ${{ needs.integration-tests.result }}`
            });
